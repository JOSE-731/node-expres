Para instalar dependencia de buenas practicas:npm i nodemon eslint eslint-config-prettier eslint-plugin-prettier prettier -D

Instalamos express: npm i express, ya con esto express queda instalado y podemos crear nuestro servidor

API Restful.
REST: Representational State Transfer
Es una convención que comúnmente se utiliza para desarrollar servicios web, que al final se comunican por el 
protocolo HTTP.

Este protocolo tiene varios métodos:

El método GET
PUT
PUSH (Son hermanitos)
POST
DELETE.

La convención de REST nos dice que por cada casi entidad que tengamos tendremos una ruta, 
un endpoint con un nombre, y también deberíamos tener un id por cada producto.

Si queremos obtener la lista de productos usaremos el método GET con la ruta de productos.
Sí queremos una ruta en particular repetimos el endpoint, pero esta vez enviamos el id.

PUT, podríamos usar Replace y modificar una lista entera (mala práctica), lo ideal es usarlo con un solo producto
PATCH, podemos hacer una actualización mucho más detalladas, de que cosas quiero modificar.
POST, nos sirve para crear.
DELETE, no deberíamos eliminar en masa, es muy peligroso, ideal es eliminar uno a uno

Los endpoints son las URLs de un API o un backend que responden a una petición. Los mismos entrypoints 
tienen que calzar con un endpoint para existir. Algo debe responder para que se renderice un sitio con sentido para el visitante.

Resumen de la clase:
Concepto
Los servicios es donde encapsulamos todos los casos de usos y comenzar a interactuar con la lógica de negocio.
En el caso de una tienda: hacer compras, transacciones, etc.
.
Estructura
Esta arquitectura está definida por capas.
Entidades:

En esta capa encontramos las entidades base del negocio.
En nuestro caso: productos, categorías, órdenes de compra.
Casos de uso

En esta capa tenemos lo relacionado a la lógica de negocio
En esta capa se encuentra los servicios
Controladores

En esta capa se brinda el acceso.
Aquí encontramos el routing
.

Flujo de trabajo:

Controladores: Encontramos los routes y middlewares.
Los controladores acceden a la capa de servicios
Servicios: donde se encuentra la lógica de negocio
Los servicios usan las librerías.
Las librerías se encargan de contactarse a la capa de entidades
Las librerías se contactan a otras fuentes de datos: API externa o base de datos.

Un middleware es un bloque de código que se ejecuta entre la petición que hace el usuario (request) 
hasta que la petición llega al servidor. Este funciona de forma secuencial